---
title: "BEE 4750/5750 Homework 3"
author: "Caroline Herzog (crh227)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1
The decision variables are the installed capacity, $X_e$ (MW), of each energy generation type, and 
the energy generated by each type per time period t, $Y_{e,t}$ (MW). Both of these variables will be represented 
in the Julia code below as vectors of length 6 where, for example $X_e(1) = X_{geothermal}$. The following 
indices correspond to the following energy types: 
1. Geothermal 
2. Coal 
3. Natural Gas Combined Cycle Gas Turbine (CCGT)  
4. Natural Gas Combustion Turbine (CT)
5. Wind 
6. Solar 

## Problem 1.2
For this problem, we are trying to find the right combination of energy generation types and production that will 
minimize the total annual cost, $Z$, of electricity generation. 

important variables:
```math
\begin{align*}
\ \text{min. total cost} = Z \\
\ \text{annualized investment cost of each generation type, e} = IC_e \\
\ \text{annual operating cost of each generation type, e} = OC_e \\
\ \text{energy demand per hour, t} = D_t \\
\ \text{installed capacity of each generator type (MW) } = X_e \\
\ \text{energy generated in hour t (MW) } = Y_{e,t} \\
\ \text{energy demand unserved in hour t (MW) } = U_{t} \\
\end{align*}
```

putting everything together:
```math
\ \text{min}Z = \sum{\text{investment cost of each generation type}} + \sum{\text{operation cost of each generation type}} + \text{penalty} \\
\ \text{min}Z = \sum_e{IC_e*X_e} + 365\text{ days}*\sum_e{}\sum_{t=1}^{24hr}{OC_e*Y_{e,t}} + 365\text{ days}*1000\text{ USD/MWh}*\sum_{t=1}^{24hr}{} U_{t}) \\
```

## Problem 1.3
```math
\ \text{non-negativity: } \\
 X_e \geq 0 \\
 Y_e,t \geq 0 \\
 U_t \geq 0 \\
```
```math
\ \text{production cannot exceed installed capacity: } \\
Y_{e,t} \leq CF_{e,t}*X_e \\
```
```math
\ \text{total energy produced plus unserved demand should equal demand at each hour t: } \\
\sum_e{Y_{e,t}} + U_t = D_t \\
```
where capacity factor of each generation type, e, per given time period, t = $CF_{e,t}$

## Problem 1.4
```julia
using JuMP
using HiGHS

genCost = Model(HiGHS.Optimizer)
types = ["geothermal", "coal", "CCGT", "CT", "wind", "solar"]
E = 1:length(types)
T = 1:24

# creates CF array for objective function
CFg = [0.95]
CFgeo = (repeat(CFg,24))'   # CF for geothermal over 24 hrs (constant)
CFf = [1]
CFf = (repeat(CFf,24))'     # CFs for coal, CCGT, CT over 24 hrs (constant)
CFw = wind_cf'      # CFs for wind, solar change over 24 hrs
CFs = solar_cf'
CF = vcat(CFgeo,CFf,CFf,CFf,CFw,CFs)    # combine into one matrix

# demand
Dt = demand

# investment cost
IC = investment_cost 

# operational cost
OC = op_cost 

# defining variables
@variable(genCost, x[e in E] >= 0)
@variable(genCost, y[e in E,t in T] >= 0)
@variable(genCost, u[T] >= 0)     # energy unserved 

# objective function
Z = sum(IC.*x) + 365*sum(OC.*sum([y[:,t] for t in T])) + 365*1000*sum(u)
@objective(genCost, Min, Z)

# constraints
@constraint(genCost, cap[e in E, t in T], y[e,t] <= CF[e,t]*x[e])
@constraint(genCost, demand, (sum([y[e,:] for e in E]) + u .== Dt))
# note: non-negativity for x[e], y[e,t], and u[t] already included in variable definitions
```

## Problem 1.5
```julia
# solve model
optimize!(genCost)

# generate solution summary
solution_summary(genCost)
cost = round(objective_value(genCost); sigdigits = 4)

# obtain optimal variable quantities, convert to usable matrices
xVals = round.(Vector(value.(x)); digits = 1)
yVals = round.(Matrix(value.(y))'; digits = 1)
uVals = Vector(value.(u))
uTotal = round(sum(uVals); digits = 1)
```

In order to achieve a minimum cost of $ $912.1 \text{million/yr }$, the utility should install the following quantities of 
energy generation: 

Table 1. Amount of Each Energy Generation Type Utility Should Build 

| Generation Type | Installed Capacity (MW) |
|:---------: | :---------: |
| Geothermal | `j xVals[1]`   |
| Coal       | `j xVals[2]`   |
| CCGT       | `j xVals[3]`   |
| CT         | `j xVals[4]`   |
| Wind       | `j xVals[5]`   |
| Solar      | `j xVals[6]`   |

`j uTotal` total MW of energy demand will be unserved. 

## Problem 1.6
```julia
using Plots

# plotting energy generated every hour for each generation type
p = plot(T,yVals, title = "Energy Generated per Hour vs. Time of Day", xlabel = "Time of Day [hr]", ylabel = "Energy Generated, MW", 
label = ["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"], color = ["chocolate" "purple" "navyblue" "seagreen" "skyblue" "gold"], 
linewidth = 4, legend = :outertopright)
plot!(T,Dt, linewidth = 2, color = "plum", label = "Demand")

# stacked area plot
areaplot(T,yVals, title = "Total Demand, Energy Generated vs. Time of Day", xlabel = "Time of Day [hr]", 
ylabel = "Energy Generated, MW", label = ["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"], fill = 0.5, 
color = ["chocolate" "purple" "navyblue" "seagreen" "skyblue" "gold"], legend = :outertopright)
plot!(T,Dt, linewidth = 3, linestyle = :dot, color = "plum", label = "Demand")
```

# Problem 2

## Problem 2.1
We need another constraint to incorporate this regulation into our model, where we can say that the sum of 
carbon emitted per year from every energy source must be less that $1.5 \text{ MtCO2}$: 

```math
\ 1.5 \text{MtCO2 } \geq 365\text{ days}*\sum_e{}\sum_{t=1}^{24hr}{Y_{e,t}} \\
```

## Problem 2.2
```julia 

# CO2 emissions vector (shorter name, convert to MtCO2)
CO2 = co2_emissions*10^-6
em_lim = 1.5   # limit of CO2 emissions in MtCO2

# setting up a new model with another constraint
using JuMP
using HiGHS

genCO2 = Model(HiGHS.Optimizer)

# variables - same as before, but with x1 and y1 instead of x and y
@variable(genCO2, x1[e in E] >= 0)
@variable(genCO2, y1[e in E,t in T] >= 0)
@variable(genCO2, u1[T] >= 0)

# objective function
Z1 = sum(IC.*x1) + 365*sum(OC.*sum([y1[:,t] for t in T])) + 365*1000*sum(u1)
@objective(genCO2, Min, Z1)

# constraints
@constraint(genCO2, cap[e in E, t in T], y1[e,t] <= CF[e,t]*x1[e])
@constraint(genCO2, demand, (sum([y1[e,:] for e in E]) + u1 .== Dt))
@constraint(genCO2, CO2_lim, em_lim >= 365*sum(CO2.*sum([y1[:,t] for t in T])))

```

## Problem 2.3
```julia 
# very similar to question 1.5, but now with genCO2

# solve model
optimize!(genCO2)

# generate solution summary
solution_summary(genCO2)
cost1 = round(objective_value(genCO2); sigdigits = 4)

# obtain optimal variable quantities
xVals1 = round.(Vector(value.(x1)); digits = 1)
yVals1 = round.(Matrix(value.(y1))'; digits = 1)
uVals1 = Vector(value.(u1))
uTotal1 = round(sum(uVals1); digits = 1)
```

In order to achieve a minimum cost of $ $1.066 \text{ billion/yr }$, the utility should install the following quantities of 
energy generation: 

Table 2. Amount of Each Energy Generation Type Utility Should Build with CO2 Regulatory Limit

| Generation Type | Installed Capacity (MW) |
|:---------: | :---------: |
| Geothermal | `j xVals1[1]`   |
| Coal       | `j xVals1[2]`   |
| CCGT       | `j xVals1[3]`   |
| CT         | `j xVals1[4]`   |
| Wind       | `j xVals1[5]`   |
| Solar      | `j xVals1[6]`   |

`j uTotal1` MW of energy demand will be unserved. 

## Problem 2.4
```julia
using Plots

# plotting energy generated every hour for each generation type
plot(T,yVals1, title = "Energy Generated per Hour vs. Time of Day", xlabel = "Time of Day [hr]", ylabel = "Energy Generated, MW", 
label = ["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"], color = ["chocolate" "purple" "navyblue" "seagreen" "skyblue" "gold"], 
linewidth = 4, legend = :outertopright)
plot!(T,Dt, linewidth = 2, color = "plum", label = "Demand")

# stacked area plot
areaplot(T,yVals1, title = "Total Demand, Energy Generated vs. Time of Day", xlabel = "Time of Day [hr]", 
ylabel = "Energy Generated, MW", label = ["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"], fill = 0.5, 
color = ["chocolate" "purple" "navyblue" "seagreen" "skyblue" "gold"], legend = :outertopright)
plot!(T,Dt, linewidth = 3, linestyle = :dot, color = "plum", label = "Demand")
```
## Problem 2.5
```julia
# checking to make sure model has binding constraints
has_duals(genCO2)

# solving for shadow price of CO2 constraint
# have to divide by 1000 since we want 1000 tCO2, but shadow price is how much it costs to 
# relax emissions by 1 MtCO2, or 10^6 tCO2
CO2_price = (1/1000)*round(shadow_price(CO2_lim); sigdigits = 4)
```

Therefore, it would save the utility $ $130,200 \text{/yr }$ to relax the CO2 emissions limit by 1000 tCO2.

# References
For help with converting Julia solution to arrays for plotting:
- https://jump.dev/JuMP.jl/stable/tutorials/linear/factory_schedule/ 
Used to learn how to move legend outside of plot:
- https://stackoverflow.com/questions/45097631/how-to-move-the-legend-to-outside-the-plotting-area-in-plots-jl-gr