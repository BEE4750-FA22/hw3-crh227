---
title: "BEE 4750/5750 Homework 3"
author: "Caroline Herzog (crh227)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1
The decision variables are the installed capacity, $X_e$ (MW), of each energy generation type, and 
the energy generated by each type per time period t, $Y_{e,t}$ (MW). Both of these variables will be represented 
in the Julia code below as vectors of length 6 where, for example $X_e(1) = X_{geothermal}$. The following 
indices correspond to the following energy types: 
1. Geothermal 
2. Coal 
3. Natural Gas Combined Cycle Gas Turbine (CCGT)  
4. Natural Gas Combustion Turbine (CT)
5. Wind 
6. Solar 

## Problem 1.2
For this problem, we are trying to find the right combination of energy generation types and production that will 
minimize the total annual cost, $Z$, of electricity generation. 

important variables:
```math
\begin{align*}
\ \text{min. total cost} = Z \\
\ \text{annualized investment cost of each generation type, e} = IC_e \\
\ \text{annual operating cost of each generation type, e} = OC_e \\
\ \text{energy demand per hour, t} = D_t \\
\end{align*}
```

putting everything together:
```math
\ \text{min}Z = \sum{\text{investment cost of each generation type}} + \sum{\text{operation cost of each generation type}} + \text{penalty} \\
\ \text{min}Z = \sum_e{IC_e*X_e} + 365\text{ days}*\sum_e{}\sum_{t=1}^{24hr}{OC_e*Y_{e,t}*1\text{ hr}} + 365\text{ days}*\sum_{t=1}^{24hr}{} (D_t - \sum_e{Y_{e,t}*1\text{ hr}}) \\
```

## Problem 1.3
```math
\ \text{non-negativity: } \\
 X_e \geq 0 \\
 Y_e,t \geq 0 \\
```
```math
\ \text{production cannot exceed installed capacity: } \\
Y_{e,t} \leq CF_{e,t}*X_e \\
\ \text{should not exceed demand: } \\
\sum_e{Y_{e,t}} \leq D_t \\
\ \text{where capacity factor of each generation type, e, per given time period, t} = CF_{e,t} \\
```
## Problem 1.4
```julia
using JuMP
using HiGHS

genCost = Model(HiGHS.Optimizer)
types = ["geothermal", "coal", "CCGT", "CT", "wind", "solar"]
E = 1:length(types)
T = 1:24

# creates CF array for objective function
CFg = [0.95]
CFgeo = repeat(CFg,24)
CFf = [1]
CFf = repeat(CFf,24)
CFw = [0.58; 0.57; 0.55; 0.28; 0.14; 0.21; 0.03; 0.04; 0.01; 0.04; 0.04; 0.01; 0.04; 0.04; 0.01; 0.01; 0.01; 0.13; 0.30; 0.45; 0.44; 0.57; 0.55; 0.58]
CFs = [0; 0; 0; 0; 0; 0; 0.20; 0.57; 0.80; 0.93; 0.99; 0.99; 0.99; 0.99; 0.95; 0.81; 0.55; 0.12; 0; 0; 0; 0; 0; 0]
CF = cat(CFgeo,CFf,CFf,CFf,CFw,CFs, dims = 2)

# create Dt array
Dt = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891, 2821, 3017, 3074, 2957, 2487, 2249, 1933, 1684, 1563]

# investment cost
IC = [457000, 268000, 85000, 62580, 92000, 90000]

# operational cost
OC = [0, 24, 35, 45, 0, 0]

# defining variables
@variable(genCost, x[e in E] >= 0)
@variable(genCost, y[e in E,t in T] >= 0)

# objective function
Z = sum(IC.*x) + 365*sum(OC.*sum([y[:,t] for t in T])) + 365*sum(Dt - sum([y[e,:] for e in E]))
@objective(genCost, Min, Z)

# constraints
@constraint(genCost, cap[e in E, t in T], y[e,t] <= CF[e,t]*x[e])
@constraint(genCost, demand, sum([y[e,:] for e in E]) .<= Dt[T])
# note: non-negativity for x[e] and y[e,t] already included in variable definitions
```

## Problem 1.5
```julia
# solve model
optimize!(genCost)

# generate solution summary
solution_summary(genCost)
cost = objective_value(genCost)

# obtain optimal variable quantities
value.(x)
value.(y)
```

In order to achieve a minimum cost of $`j cost`, the utility should install the following quantities of 
energy generation: 

Table 1. Amount of Each Energy Generation Type Utility Should Build 

| Generation Type | Installed Capacity (MW) |
|:---------: | :---------: |
| Geothermal | `j x[1]`   |
| Coal       | `j x[2]`   |
| CCGT       | `j x[3]`   |
| CT         | `j x[4]`   |
| Wind       | `j x[5]`   |
| Solar      | `j x[6]`   |

X MW of energy demand will be unserved. 

## Problem 1.6

# Problem 2

## Problem 2.1

## Problem 2.2

## Problem 2.3

## Problem 2.4

## Problem 2.5

# References